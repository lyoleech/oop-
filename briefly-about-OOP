К ООП
Класс - это пользовательский тип данных, т.е. свой новый тип данных, который мы можем создать (с точки зрения структуры программы). Еще это способ описания сущности, определяющий состояние и поведение, зависящее от этого состояния, а также правила для взаимодействия с данной сущностью (контракт). С точки зрения программирования класс можно рассматривать как набор данных (полей, атрибутов, членов класса) и функций для работы с ними (методов).

Объект (экземпляр) – это отдельный представитель класса, имеющий конкретное состояние и поведение, полностью определяемое классом. Проще говоря, объект имеет конкретные значения атрибутов и методы, работающие с этими значениями на основе правил, заданных в классе.

Спецификация используется для описания, что есть объект и что объект делает. Реализация описывает, как объект реализован.

Интерфейс – это набор методов класса, доступных для использования другими классами. Очевидно, что интерфейсом класса будет являться набор всех его публичных методов в совокупности с набором публичных атрибутов. По сути, интерфейс специфицирует класс, чётко определяя все возможные действия над ним. Интерфейсом могут быть методы экземпляров. 

Абстрагирование - это способ выделить набор значимых характеристик объекта, исключая из рассмотрения незначимые. Соответственно, абстракция – это набор всех таких характеристик. Если бы для моделирования поведения автомобиля приходилось учитывать химический состав краски кузова и удельную теплоёмкость лампочки подсветки номеров, мы никогда бы не узнали, что такое NFS.

——————————//
Объектно-􏰀ориентированная парадигма поддерживает следующие принципы: инкапсуляцию, наследование, полиморфизм. Рассмотрим эти механизмы:

Инкапсуляция - это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали реализации от пользователя. Инкапсуляция неразрывно связана с понятием интерфейса класса. По сути, всё то, что не входит в интерфейс, инкапсулируется в классе.

Полиморфизм – это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.

Наследование – это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующимся функционалом. Класс, от которого производится наследование, называется базовым или родительским (супер-классом). Новый класс – потомком, наследником или производным классом. Необходимо отметить, что производный класс полностью удовлетворяет спецификации родительского, однако может иметь дополнительный функционал. С точки зрения интерфейсов: каждый производный класс полностью реализует интерфейс родительского класса, а обратное не верно.
——————————//

По умолчанию Private модификатор доступа. Он даёт доступ дружественным классам и функциям и, очевидно, поле доступно внутри самого класса (пример с методом Print()). Модификаторы доступа относятся к областям. Protected позволяет наследовать поля, но не даёт доступ извне. 

Геттеры и сеттеры - существуют, чтобы не нарушать инкапсуляцию; обыкновенные методы (методы чтения и изменения, строго говоря) класса, собственно, они же функции, которые отвечают за то, чтобы взаимодействовать с каким-то конкретным полем. Защищают от того, что пользователь может засунуть говнище в поле класса, просто обратившись к нему, если мы вдруг захотели оставить это поле в области Public.  Мы ведь, как разработчики, могли предусматривать какую-то другую работу с этим классом и его конкретным полем. Геттеры - позволяют получить данные, а сеттеры - установить данные. 

Важно отметить, что в ООП существует особый тип классов — абстрактные классы. Абстрактные классы — это классы для которых не существует экземпляров, они лишь описывают общие характеристики классов-потомков (противоположность конкретного класса).

// This - хранит адрес памяти объекта. Хранит ссылку на самого себя. Помогает устранять неоднозначности. 

Иерархия — упорядоченная система абстракций. Структурная ие􏰀рархия — отражает взаимосвязи типа «часть — целое» и определяет от􏰀ношение агрегирования между объектами. (Значительное упрощение в понимании сложных задач достигается за счет образования из абстракций иерархической структуры. Это расположение частей или элементов целого от высшего к низшему, упорядочение абстракций, расположение их по уровням. Одним из важных видов иерархии является наследование.) 
В ООП используют два вида иерархии. Иерархия «целое–часть» показывает, что некоторые абстракции включены в некоторую абстракцию как ее части, например, строение цветка описывается следующими частями: цветоложе, пестик, тычинки, цветоножка, завязь, лепестки. Этот вариант иерархии используется в процессе разбиения системы на разных этапах проектирования (на логическом уровне — при декомпозиции предметной области на объекты, на физическом уровне — при декомпозиции системы на модули и при выделении отдельных процессов в мультипроцессорной системе). Иерархия «общее–частное» — показывает, что некоторая абстракция является частным случаем другой абстракции, например, ель — это разновидность хвойных деревьев, а деревья — это часть растительного мира планеты. Используется при разработке структуры классов, когда сложные классы строятся на базе более простых путем добавления к ним новых характеристик и, возможно, уточнения имеющихся.

Категория как математическое понятие имеет дело c абстрактными математическими структурами и отношениями между ними. Отноше􏰀ния между классами объектов моделируются математикой и логикой. Такая модель коллекции объектов с некоторым структурным подобием определяется категорией. 

Полиморфизм - определение поведения в зависимости от реализации (ну, примерно). Класс может иметь одни и те же методы, но вести себя они будут по-разному. Позволяет избежать слишком перегрузки функций. Виртуальные функции - классы будут иметь одни и те же методы, но вести они себя буду по-разному. Виртуальные функции - специальный вид функций-членов класса. Виртуальная функция отличается об обычной функции тем, что для обычной функции связывание вызова функции с ее определением осуществляется на этапе компиляции. Для виртуальных функций это происходит во время выполнения программы. Определяется в базовом классе, а любой порожденный класс может ее переопределить. Виртуальная функция вызывается только через указатель или ссылку на базовый класс (https://prog-cpp.ru/cpp-virtual/). Под перегрузкой функции понимается определение нескольких функций с одинаковыми именами, но различными параметрами. Наборы параметров перегруженных функций могут отличаться порядком следования, количеством, типом. Таким образом перегрузка нужна для того, чтобы избежать дублирования функций, выполняющих сходные действия, но с различной программной логикой (http://cppstudio.com/post/406/).

Метод выстрелить - классный пример виртуальной функции. 

virtual void gang
	…
	переопределяем void gang в наследованном классе override 

Указатель на базовый класс может принимать ссылки на любого своего наследника. 

Кстати, в примере с оружием Gun - не супер-корректно. Чисто формально, мы могли и должны были создать абстрактный Вооружение и наследовать от него все наше оружие (в том числе нож, пулемёт и т. д.), ведь особенность этого всего - наносить урон и делать это должен любой вид оружия. 
